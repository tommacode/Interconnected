<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Groups | Interconnected</title>
    <%- include('Partials/Head.html') %>
  </head>
  <body onload="GetGroupID(); LoadGroups(); LoadMessages()">
    <%- include('Partials/Navigation.html') %>
    <div id="LeftMenuGroups"></div>
    <main>
      <div id="MessageWrapper"></div>
      <div id="InputDiv">
        <select name="MessageType" id="MessageType">
          <option value="Normal">Normal</option>
          <option value="Question">Question</option>
          <option value="Information">Information</option>
          <option value="Meeting">Meeting</option>
        </select>
        <div id="MeetingMessageOptions" class="hidden">
          <label for="MeetingDate">Meeting Date:</label>
          <input type="datetime-local" name="MeetingDate" />
          <label for="MeetingLength">Meeting Length (Minutes):</label>
          <input type="number" min="1" step="1" name="MeetingLength" />
        </div>
        <div id="InformationMessageOptions" class="hidden">
          <label for="AllowResponses">Allow comments:</label>
          <input type="checkbox" />
          <br />
        </div>
        <div id="QuestionMessageOptions" class="hidden">
          <label for="ShowOnNoticeBoard">Show on notice board:</label>
          <input type="checkbox" name="ShowOnNoticeBoard" />
        </div>
        <div id="NormalMessageOptions"></div>
        <input id="MainInput" type="text" placeholder="Write a Message..." />
        <button id="MainButton" onclick="SendMessage()">Send</button>
      </div>
    </main>
    <dialog class="Dialog" id="MessageInteractionError">
      <h3>Message Interaction Failed</h3>
      <p id="MessageInteractionErrorMessage"></p>
      <button
        class="BlackButton"
        onclick="document.getElementById('MessageInteractionError').close()"
      >
        Close
      </button>
    </dialog>
    <script>
      let GroupID = "";
      function GetGroupID() {
        GroupID = window.location.pathname.split("/")[2];
        if (GroupID === undefined || GroupID === "") {
          MainInput.classList.add("hidden");
          MainButton.classList.add("hidden");
          // Make a dummy message with the user being "Direct Messages" and the message being "Select a chat to start"
          const Message = document.createElement("div");
          Message.classList.add("Message");
          Message.innerHTML = `<p class="Time">${new Date().toLocaleString()}</p><h3>Direct Messages</h3><p>Select a chat or create one!</p>`;
          document.getElementById("MessageWrapper").appendChild(Message);
        } else {
          ConnectToSocket();
          CorporateSpeak();
        }
      }
      // Load other groups here
      function LoadGroups() {
        fetch("/api/User/Groups?Type=Group", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        })
          .then((res) => res.json())
          .then((data) => {
            data.forEach((group) => {
              const Group = document.createElement("div");
              Group.classList.add("ListGroup");
              if (group.UniqueID === GroupID)
                Group.classList.add("ActiveGroup");
              Group.id = group.UniqueID;
              Group.innerHTML = `<h3>${group.Name}</h3>`;
              Group.addEventListener("click", () => {
                ChangeGroup(group.UniqueID);
              });
              document.getElementById("LeftMenuGroups").appendChild(Group);
            });
          });
      }
      // Get messages here
      function LoadMessages() {
        fetch(`/api/User/Messages/${GroupID}`, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        })
          .then((res) => res.json())
          .then((data) => {
            // Clear the message wrapper
            document.getElementById("MessageWrapper").innerHTML = "";
            data.forEach((message) => {
              RenderMessage(message);
            });
          });
      }
      function SendMessage() {
        const MessageType = document.getElementById("MessageType").value;
        let Children = document.getElementById(
          `${MessageType}MessageOptions`
        ).children;
        let MessageOptions = [];
        for (let i = 0; i < Children.length; i++) {
          if (Children[i].tagName === "INPUT") {
            if (Children[i].type === "checkbox") {
              MessageOptions.push({
                Name: Children[i].name,
                Value: Children[i].checked,
              });
            } else {
              MessageOptions.push({
                Name: Children[i].name,
                Value: Children[i].value,
              });
            }
          }
        }

        let Body = {
          GroupID: GroupID,
          Message: document.getElementById("MainInput").value,
          MessageType: MessageType,
          MessageOptions: MessageOptions,
        };
        fetch("/api/User/SendMessage", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(Body),
        })
          .then((res) => res.json())
          .then((data) => {
            if (data.Success) {
              document.getElementById("MainInput").value = "";
              document.getElementById("MessageType").value = "Normal";
              document
                .getElementById(`${MessageType}MessageOptions`)
                .classList.add("hidden");
              document
                .getElementById("NormalMessageOptions")
                .classList.remove("hidden");
            }
          });
      }

      function CorporateSpeak() {
        fetch("/api/User/CorporateSpeak", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        })
          .then((res) => res.json())
          .then((data) => {
            document.getElementById("MainInput").placeholder =
              data.Words + "...";
          });
        document
          .getElementById("MainInput")
          .addEventListener("keyup", (event) => {
            if (event.keyCode === 13) {
              event.preventDefault();
              SendMessage();
            }
          });
      }

      // Connect to socket
      function ConnectToSocket() {
        const socket = new WebSocket("ws://localhost:3001");
        socket.onopen = () => {
          socket.send(
            JSON.stringify({
              session_id: document.cookie.split("=")[1],
              GroupID: GroupID,
            })
          );
        };
        socket.onmessage = (event) => {
          data = JSON.parse(event.data);
          RenderMessage(data);
          div.scrollTo({ top: div.scrollHeight });
          if (SendNotifications) {
            // Check that the sender is not the current user
            if (
              data.Sender != document.getElementById("AccountName").innerHTML
            ) {
              new Notification(
                data.Sender +
                  ` (${
                    document.getElementById("ActiveGroup").children[0].innerHTML
                  })`,
                {
                  body: data.Message,
                }
              );
            }
          }
        };
        onload = () => {
          const div = document.getElementById("MessageWrapper");
          div.scrollTo({ top: div.scrollHeight });
        };
        setTimeout(() => {
          const div = document.getElementById("MessageWrapper");
          div.scrollTo({ top: div.scrollHeight });
        }, 1000);
      }

      // Get notification permisison
      let SendNotifications = false;
      Notification.requestPermission().then((result) => {
        if (result === "granted") {
          SendNotifications = true;
        }
      });

      // Change group
      function ChangeGroup(NewGroupID) {
        if (NewGroupID === GroupID) return;
        // Check to see if there is an open group
        if (GroupID == "" || GroupID == undefined) {
          MainInput.classList.remove("hidden");
          MainButton.classList.remove("hidden");
        } else {
          const OldGroup = document.getElementById(GroupID);
          OldGroup.classList.remove("ActiveGroup");
        }
        const NewGroup = document.getElementById(NewGroupID);
        NewGroup.classList.add("ActiveGroup");
        GroupID = NewGroupID;
        document.getElementById("MessageWrapper").innerHTML = "";
        LoadMessages();
        ConnectToSocket();
        const newURL =
          window.location.protocol +
          "//" +
          window.location.host +
          "/Group/" +
          NewGroupID;
        history.pushState(null, null, newURL);
      }
      // Create event listeniner

      document.getElementById("MessageType").addEventListener("change", () => {
        const QuestionType = document.getElementById("MessageType").value;
        // Hide them all then show the one we want
        document.getElementById("NormalMessageOptions").classList.add("hidden");
        document
          .getElementById("QuestionMessageOptions")
          .classList.add("hidden");
        document
          .getElementById("InformationMessageOptions")
          .classList.add("hidden");
        document
          .getElementById("MeetingMessageOptions")
          .classList.add("hidden");
        document
          .getElementById(`${QuestionType}MessageOptions`)
          .classList.remove("hidden");
      });
      function RenderMessage(Message) {
        const AltTypes = ["Question", "Information", "Meeting"];
        if (!AltTypes.includes(Message.MessageType)) {
          Message.MessageType = "Normal";
        }
        let MessageDiv = document.createElement("div");
        MessageDiv.classList.add("Message");
        if (Message.MessageType == "Normal") {
          MessageDiv.classList.add("Normal");
          MessageDiv.innerHTML = `<p class="Time">${Message.CreatedAt}</p><h3>${Message.Sender}</h3><p>${Message.Message}</p>`;
        }
        if (Message.MessageType == "Question") {
          MessageDiv.classList.add("Question");
          let TableDiv;
          console.log(Message.MessageInteractions);
          MessageDiv.innerHTML = `<p class="Time">${Message.CreatedAt}</p><h3>${Message.Sender}</h3><p>${Message.Message}</p><input type="text" placeholder="Answer..." class="InputWide" id="${Message.UniqueID}Input"><button onclick="SubmitAnswer('${Message.UniqueID}')" class="BlackButton">Send</button><button class="BlackButton" id="${Message.UniqueID}AnswerButton" onclick="RevealAnswers('${Message.UniqueID}')"  title="View Answers">${Message.MessageInteractions.length} Answer(s)</button class="BlackBtn">`;
          TableDiv = document.createElement("div");
          TableDiv.classList.add("TableDiv");
          TableDiv.innerHTML = `<table class="AnswerTable hidden" id="${Message.UniqueID}AnswerTable"><tr><th>Sender</th><th>Answer</th></tr></table>`;
          if (Message.MessageInteractions.length > 0) {
            for (let i = 0; i < Message.MessageInteractions.length; i++) {
              TableDiv.children[0].innerHTML += `<tr><td>${Message.MessageInteractions[i].User}</td><td>${Message.MessageInteractions[i].Answer}</td></tr>`;
            }
          }
          MessageDiv.appendChild(TableDiv);
        }
        if (Message.MessageType == "Information") {
          MessageDiv.classList.add("Information");
          MessageDiv.innerHTML = `<p class="Time">${Message.CreatedAt}</p><h3>${Message.Sender}</h3><p>${Message.Message}</p><button class="BlackButton" onclick="AknowledgeInformation('${Message.UniqueID}')">Aknowledge</button><p>${Message.MessageInteractions.length} Aknowledgment(s)</p>`;
        }
        if (Message.MessageType == "Meeting") {
          MessageDiv.classList.add("Meeting");
          MessageDiv.innerHTML = `<p class="Time">${Message.CreatedAt}</p><h3>${Message.Sender}</h3><p>${Message.Message}</p><button class="BlackButton" onclick="AcceptMeeting('${Message.UniqueID}')">Accept</button><button class="RedButton" onclick="DeclineMeeting('${Message.UniqueID}')">Decline</button>`;
        }
        document.getElementById("MessageWrapper").appendChild(MessageDiv);
        const div = document.getElementById("MessageWrapper");
        div.scrollTo({ top: div.scrollHeight });
      }
      function SubmitAnswer(MessageID) {
        const Answer = document.getElementById(`${MessageID}Input`).value;
        const Body = {
          MessageID: MessageID,
          Answer: Answer,
          MessageType: "Question",
        };
        fetch("/api/User/MessageInteraction", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(Body),
        })
          .then((res) => res.json())
          .then((data) => {
            if (data.Success) {
              document.getElementById(`${MessageID}Input`).value = "";
              document.getElementById(
                `${MessageID}AnswerTable`
              ).innerHTML += `<tr><td>${
                document.getElementById("AccountName").innerHTML
              }</td><td>${Answer}</td></tr>`;

              document.getElementById(
                `${MessageID}AnswerButton`
              ).innerHTML = `${
                document.getElementById(`${MessageID}AnswerTable`).children[0]
                  .children.length
              } Answer(s)`;
              // Eventually make this change the class of the message div and add some animations

              // LoadMessages();
            } else {
              document.getElementById(
                "MessageInteractionErrorMessage"
              ).innerHTML = data.Message;
              document.getElementById("MessageInteractionError").showModal();
            }
          });
      }
      function AknowledgeInformation(MessageID) {
        const Body = {
          MessageID: MessageID,
          MessageType: "Information",
        };
        fetch("/api/User/MessageInteraction", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(Body),
        })
          .then((res) => res.json())
          .then((data) => {
            // Eventually make this change the class of the message div and add some animations
          });
      }
      function AcceptMeeting(MessageID) {
        const Body = {
          MessageID: MessageID,
          MessageType: "Meeting",
          Response: "Accept",
        };
        fetch("/api/User/MessageInteraction", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(Body),
        })
          .then((res) => res.json())
          .then((data) => {
            // Eventually make this change the class of the message div and add some animations
          });
      }
      function DeclineMeeting(MessageID) {
        const Body = {
          MessageID: MessageID,
          MessageType: "Meeting",
          Response: "Decline",
        };
        fetch("/api/User/MessageInteraction", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(Body),
        })
          .then((res) => res.json())
          .then((data) => {
            // Eventually make this change the class of the message div and add some animations
          });
      }
      function RevealAnswers(UniqueID) {
        const Table = document.getElementById(`${UniqueID}AnswerTable`);
        if (Table.classList.contains("hidden")) {
          Table.classList.remove("hidden");
          document.getElementById(`${UniqueID}AnswerButton`).innerHTML =
            "Hide Answers";
        } else {
          Table.classList.add("hidden");
          // find the number of answers
          const Answers = document.getElementById(`${UniqueID}AnswerTable`)
            .children[0].children.length;
          document.getElementById(`${UniqueID}AnswerButton`).innerHTML =
            Answers + " Answer(s)";
        }
      }
    </script>
  </body>
</html>

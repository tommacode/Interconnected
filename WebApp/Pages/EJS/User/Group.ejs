<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title></title>
    <%- include('Partials/Head.html') %>
  </head>
  <body onload="GetGroupID(); LoadGroups(); LoadMessages()">
    <%- include('Partials/Navigation.html') %>
    <div id="LeftMenuGroups"></div>
    <main>
      <div id="MessageWrapper"></div>
      <div id="InputDiv">
        <select name="" id="">
          <option value="Standard">Normal</option>
          <option value="Question">Question</option>
          <option value="Information">Information</option>
          <option value="Meeting">Meeting</option>
        </select>
        <br />
        <input id="MainInput" type="text" placeholder="Write a Message..." />
        <button id="MainButton" onclick="SendMessage()">Send</button>
      </div>
    </main>
    <script>
      let GroupID = "";
      function GetGroupID() {
        GroupID = window.location.pathname.split("/")[2];
        if (GroupID === undefined || GroupID === "") {
          MainInput.classList.add("hidden");
          MainButton.classList.add("hidden");
          // Make a dummy message with the user being "Direct Messages" and the message being "Select a chat to start"
          const Message = document.createElement("div");
          Message.classList.add("Message");
          Message.innerHTML = `<p class="Time">${new Date().toLocaleString()}</p><h3>Direct Messages</h3><p>Select a chat or create one!</p>`;
          document.getElementById("MessageWrapper").appendChild(Message);
        } else {
          ConnectToSocket();
          CorporateSpeak();
        }
      }
      // Load other groups here
      function LoadGroups() {
        fetch("/api/User/Groups?Type=Group", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        })
          .then((res) => res.json())
          .then((data) => {
            data.forEach((group) => {
              const Group = document.createElement("div");
              Group.classList.add("ListGroup");
              if (group.UniqueID === GroupID)
                Group.classList.add("ActiveGroup");
              Group.id = group.UniqueID;
              Group.innerHTML = `<h3>${group.Name}</h3>`;
              Group.addEventListener("click", () => {
                ChangeGroup(group.UniqueID);
              });
              document.getElementById("LeftMenuGroups").appendChild(Group);
            });
          });
      }
      // Get messages here
      function LoadMessages() {
        fetch(`/api/User/Group/Messages/${GroupID}`, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        })
          .then((res) => res.json())
          .then((data) => {
            data.forEach((message) => {
              const Message = document.createElement("div");
              Message.id = message.UniqueID;
              Message.classList.add("Message");
              Message.innerHTML = `<p class="Time">${message.CreatedAt}</p><h3>${message.Sender}</h3><p>${message.Message}</p>`;
              document.getElementById("MessageWrapper").appendChild(Message);
            });
          });
      }
      function SendMessage() {
        let Body = {
          GroupID: GroupID,
          Message: document.getElementById("MainInput").value,
        };
        fetch("/api/User/Group/SendMessage", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(Body),
        })
          .then((res) => res.json())
          .then((data) => {
            if (data.Success) {
              document.getElementById("MainInput").value = "";
            }
          });
      }

      function CorporateSpeak() {
        fetch("/api/User/CorporateSpeak", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        })
          .then((res) => res.json())
          .then((data) => {
            document.getElementById("MainInput").placeholder =
              data.Words + "...";
          });
        document
          .getElementById("MainInput")
          .addEventListener("keyup", (event) => {
            if (event.keyCode === 13) {
              event.preventDefault();
              SendMessage();
            }
          });
      }

      // Connect to socket
      function ConnectToSocket() {
        const socket = new WebSocket("ws://localhost:3001");
        socket.onopen = () => {
          socket.send(
            JSON.stringify({
              session_id: document.cookie.split("=")[1],
              GroupID: GroupID,
            })
          );
        };
        socket.onmessage = (event) => {
          data = JSON.parse(event.data);
          const Message = document.createElement("div");
          Message.classList.add("Message");
          Message.innerHTML = `<p class="Time">${data.CreatedAt}</p><h3>${data.Sender}</h3><p>${data.Message}</p>`;
          document.getElementById("MessageWrapper").appendChild(Message);
          const div = document.getElementById("MessageWrapper");
          div.scrollTo({ top: div.scrollHeight });
          if (SendNotifications) {
            // Check that the sender is not the current user
            if (
              data.Sender != document.getElementById("AccountName").innerHTML
            ) {
              new Notification(
                data.Sender +
                  ` (${
                    document.getElementById("ActiveGroup").children[0].innerHTML
                  })`,
                {
                  body: data.Message,
                }
              );
            }
          }
        };
        onload = () => {
          const div = document.getElementById("MessageWrapper");
          div.scrollTo({ top: div.scrollHeight });
        };
        setTimeout(() => {
          const div = document.getElementById("MessageWrapper");
          div.scrollTo({ top: div.scrollHeight });
        }, 1000);
      }

      // Get notification permisison
      let SendNotifications = false;
      Notification.requestPermission().then((result) => {
        if (result === "granted") {
          SendNotifications = true;
        }
      });

      // Change group
      function ChangeGroup(NewGroupID) {
        if (NewGroupID === GroupID) return;
        // Check to see if there is an open group
        if (GroupID == "" || GroupID == undefined) {
          MainInput.classList.remove("hidden");
          MainButton.classList.remove("hidden");
        } else {
          const OldGroup = document.getElementById(GroupID);
          OldGroup.classList.remove("ActiveGroup");
        }
        const NewGroup = document.getElementById(NewGroupID);
        NewGroup.classList.add("ActiveGroup");
        GroupID = NewGroupID;
        document.getElementById("MessageWrapper").innerHTML = "";
        LoadMessages();
        ConnectToSocket();
        const newURL =
          window.location.protocol +
          "//" +
          window.location.host +
          "/Group/" +
          NewGroupID;
        history.pushState(null, null, newURL);
      }
    </script>
  </body>
</html>
